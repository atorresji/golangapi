// Code generated by mockery v2.10.1. DO NOT EDIT.

package mocks

import (
	dto "packages/database/dto"

	mock "github.com/stretchr/testify/mock"

	models "packages/database/models"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// AddProduct provides a mock function with given fields: p
func (_m *ProductRepository) AddProduct(p models.Product) bool {
	ret := _m.Called(p)

	var r0 bool
	if rf, ok := ret.Get(0).(func(models.Product) bool); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeleteProduct provides a mock function with given fields: id
func (_m *ProductRepository) DeleteProduct(id int) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetProductById provides a mock function with given fields: id
func (_m *ProductRepository) GetProductById(id int) dto.ProductDto {
	ret := _m.Called(id)

	var r0 dto.ProductDto
	if rf, ok := ret.Get(0).(func(int) dto.ProductDto); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(dto.ProductDto)
	}

	return r0
}

// GetProducts provides a mock function with given fields:
func (_m *ProductRepository) GetProducts() []dto.ProductDto {
	ret := _m.Called()

	var r0 []dto.ProductDto
	if rf, ok := ret.Get(0).(func() []dto.ProductDto); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.ProductDto)
		}
	}

	return r0
}

// UpadteProduct provides a mock function with given fields: p
func (_m *ProductRepository) UpadteProduct(p models.Product) bool {
	ret := _m.Called(p)

	var r0 bool
	if rf, ok := ret.Get(0).(func(models.Product) bool); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
